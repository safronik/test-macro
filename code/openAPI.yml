openapi: 3.1.0
info:
  title: Macro Test Task API
  description: |-
    This is a API description for the test task received in Macro company.
  contact:
    email: noone@nowhere.some
  version: 1.0.0
servers:
  - url: http://test.loc/api
tags:
  - name: user
    description: User paths
  - name: article
    description: Articles paths
  - name: comment
    description: Comments paths
  - name: autentication
    description: Autentication paths
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: #/components/schemas/ResponseSuccess
    get:
      tags:
        - user
      summary: Get user by id
      description: ''
      operationId: getUserById
      parameters:
        - name: id
          in: query
          description: 'The name that needs to be fetched. Use user1 for testing.'
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: query
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: query
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/login:
    get:
      tags:
        - autentication
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - $ref: '#/components/schemas/ResponseError'
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - autentication
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: [ ]
      responses:
        default:
          description: successful operation
  /atricle:
    post:
      tags:
        - article
      summary: Add a new article
      description: Add a new article
      operationId: addArticle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '405':
          description: Invalid input
    get:
      tags:
        - article
      summary: Get article by id
      operationId: getArticleById
      parameters:
        - name: id
          in: query
          description: 'The article id that needs to be fetched'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - article
      summary: Update an article
      operationId: updateArticle
      parameters:
        - name: id
          in: query
          description: 'Article ID'
          schema:
            type: string
      requestBody:
        description: Update an existent article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid ID supplied
        '404':
          description: Article not found
        '405':
          description: Validation exception
    delete:
      tags:
        - article
      summary: Delete article
      description: This can only be done by admin or article author
      operationId: deleteArticle
      parameters:
        - name: id
          in: query
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /artilce/comments:
    get:
      tags:
        - article
        - comment
      summary: Get comments for article with pagination
      operationId: getArticleCommentsWithPagination
      parameters:
        - name: offset
          in: query
          required: true
          schema:
            type: integer
        - name: amount
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  $ref: '#/components/schemas/Comment'
        '405':
          description: Invalid input
  /artilce/comments/all:
    get:
      tags:
        - article
        - comment
      summary: Get all comments for article
      operationId: getArticleCommentsAll
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  $ref: '#/components/schemas/Comment'
        '405':
          description: Invalid input
  /comment:
    post:
      tags:
        - comment
      summary: Add a new comment
      operationId: addComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: Successful operation
          headers:
            X-Rate-Limit-Name:
              description: calls per minute allowed by the name
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '405':
          description: Invalid input
        '425':
          description: Too much requests
          headers:
            X-Rate-Limit-Name:
              description: calls per minute allowed by the name
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
    get:
      tags:
        - comment
      summary: Get comment by id
      operationId: getCommentById
      parameters:
        - name: id
          in: query
          description: 'The comment id that needs to be fetched'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - comment
      summary: Update an comment
      operationId: updateComment
      parameters:
        - name: id
          in: query
          description: 'Comment ID'
          schema:
            type: string
      requestBody:
        description: Update an existent comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
        '405':
          description: Validation exception
    delete:
      tags:
        - comment
      summary: Delete comment
      description: This can only be done by admin or comment author
      operationId: deleteComment
      parameters:
        - name: id
          in: query
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [ 10 ]
        username:
          type: string
          examples: [ theUser ]
        firstName:
          type: string
          examples: [John]
        lastName:
          type: string
          examples: [ James ]
        email:
          type: string
          examples: [ john@email.com ]
      xml:
        name: user
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        author:
          $ref: '#/components/schemas/User'
        heading:
          type: string
          examples: [ Something about something ]
        body:
          type: string
          examples: [ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Facilisi nisi et cillum volutpat proident erat facilisis sanctus commodi. Iriure nonumy aliquyam. ]
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [ 10 ]
        commenter:
          type: string
          examples: [John]
        user:
          anyOf:
            - type: 'null'
            - $ref: '#/components/schemas/User'
        article:
          $ref: '#/components/schemas/Article'
        approved:
          type: boolean
      xml:
        name: order
    ResponseSuccess:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
          examples: [ 'You have been logged in successfully' ]
        count:
          type: integer
        data:
          type: array
    ResponseError:
      type: object
      properties:
        error:
          type: integer
          format: integer
          examples: [ 1,2,3 ]
        message:
          type: string
          examples: [ 'You are not allowed to post this fast' ]
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: query